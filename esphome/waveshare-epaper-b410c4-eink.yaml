###############################################################################
# NOTES #######################################################################
###############################################################################

# https://www.waveshare.com/e-paper-esp32-driver-board.htm
# https://www.waveshare.com/wiki/E-Paper_ESP32_Driver_Board
# https://files.waveshare.com/upload/8/80/E-Paper_ESP32_Driver_Board_Schematic.pdf

# Can't use GPIO 13, 14, 15, 25, 26, 27 as they're on the ePaper connector

# https://esphome.io/components/i2c
# https://esphome.io/components/uart

# https://esphome.io/components/sensor/ld2420


###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: waveshare-epaper-b410c4
  friendly_name: Kitchen SmartFrame b410c4

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s # Wait a bit longer so all the items are received
        - logger.log: "Initial data received. Refreshing display"
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: esp-idf

###############################################################################

# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: ${name}

api:

ota:
  platform: esphome

# Enable logging
logger:
#  level: VERBOSE #DEBUG

###############################################################################
# INPUTS / OUTPUTS / MODULES ##################################################
###############################################################################

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

uart:
  id: ld2420_uart
  tx_pin: GPIO23
  rx_pin: GPIO22
  baud_rate: 115200
  parity: NONE
  stop_bits: 1

output:
  - platform: gpio
    pin:
      number: GPIO2
      mode: output
    id: LED

ld2420:

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: no
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

number:
  - platform: ld2420
    presence_timeout:
      name: mmWave Presence Timeout
    min_gate_distance:
      name: mmWave Gate Minimum
    max_gate_distance:
      name: mmWave Gate Maximum
    gate_select:
      name: mmWave Gate Select
    still_threshold:
      name: mmWave Still Threshold Value
    move_threshold:
      name: mmWave Move Threshold Value

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - output.turn_on: LED
          - delay: 250ms
          - output.turn_off: LED
          - if:
              condition:
                and:
                  - lambda: 'return id(data_updated) == true;' # We have to have had new sensor data
                  - lambda: 'return id(time_since_refresh) >= 5;' # It has to have been at least 5 minutes since the last refresh
                  - lambda: 'return id(mmwave_presence).state == true;' # We have to have presence
              then:
                - logger.log:
                    format: "Refreshing display - States are: Sensor Data %d / Rate Limit Timer %u / Presence %d"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)', id(mmwave_presence).state ]
                - script.execute: update_screen
              else:
                - logger.log:
                    format: "Skipping display refresh -  States are: Sensor Data %d / Rate Limit Timer %u / Presence %d"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)', id(mmwave_presence).state ]
                - lambda: 'id(time_since_refresh) += 1;'

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: ESP32 Shutdown
  - platform: restart
    name: ESP32 Restart
  - platform: safe_mode
    name: ESP32 Restart (Safe Mode)
  - platform: template
    name: ESP32 Refresh Screen
    entity_category: config
    on_press:
      - script.execute: update_screen

  - platform: ld2420
    apply_config:
      name: mmWave Apply Config
    factory_reset:
      name: mmWave Factory Reset
    restart_module:
      name: mmWave Restart
    revert_config:
      name: mmWave Undo

select:
  - platform: ld2420
    operating_mode:
      name: mmWave Mode

switch:
  - platform: factory_reset
    name: ESP32 Factory Reset

###############################################################################
# BINARY SENSORS ##############################################################
###############################################################################

binary_sensor:
  - platform: status
    name: ESP32 Status

  - platform: ld2420
    has_target:
      name: mmWave Presence
      id: mmwave_presence

###############################################################################
# TEXT SENSORS ################################################################
###############################################################################

text_sensor:
  - platform: ld2420
    fw_version:
      name: LD2420 Firmware

  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: sensor.timeofday_greeting
    id: timeofday_greeting
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  # Weather Sensors - Now
  - platform: homeassistant
    entity_id: sensor.weather_now
    id: weather_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Weather Sensors - Daily
  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: datetime0
    id: daily_forecast_datetime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: shorttime0
    id: daily_forecast_shorttime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: condition0
    id: daily_forecast_condition0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

##



###############################################################################
# GENERAL SENSORS #############################################################
###############################################################################

sensor:
    #Device UPTIME
  - platform: uptime
    name: ESP32 Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: ld2420
    moving_distance:
      name : mmWave Moving Distance
      filters:
        - throttle_average: 15s
        - filter_out: nan

  # Device Sensors - for monitoring device remotely
  - platform: template
    name: Display Last Update
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: Display Num Refresh
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: ESP32 WiFi Signal
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Home Assistant General Sensors

  # Weather Sensors - Now
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_temperature
    id: temperature_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_humidity
    id: humidity_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_pressure
    id: pressure_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Weather Sensors - Daily
  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: temperature0
    id: daily_forecast_temperature0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: templow0
    id: daily_forecast_templow0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_speed0
    id: wind_speed0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_bearing0
    id: wind_bearing0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

##

###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_extra_small
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_extra_small_bold
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_small
    size: 20
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_small_bold
    size: 20
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_med
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_med_bold
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_large
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_large_bold
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_title
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_med
    size: 40
    glyphs: &mdi-glyphs
      - "\U000F0594" # weather-night / clear-night
      - "\U000F0590" # weather-cloudy / cloudy
      - "\U000F0591" # weather-fog / fog
      - "\U000F0592" # weather-hail / hail
      - "\U000F0593" # weather-lightning / lightning
      - "\U000F067E" # weather-lightning-rainy / lightning-rainy
      - "\U000F0595" # weather-partly-cloudy / partlycloudy
      - "\U000F0596" # weather-pouring / pouring
      - "\U000F0597" # weather-rainy / rainy
      - "\U000F0598" # weather-snowy / snowy
      - "\U000F067F" # weather-snowy-rainy / snowy-rainy
      - "\U000F0599" # weather-sunny / sunny
      - "\U000F059D" # weather-windy / windy
      - "\U000F059E" # weather-windy-variant / windy-variant
      - "\U000F1C78" # weather-hurricane-outline / exceptional
      - "\U000F0F31" # weather-night-partly-cloudy / partlycloudy-night
      - "\U000F05CE" # clock-alert-outline
      - "\U000F018C" # compass-outline
      - "\U000F02D6" # Blank

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_large
    size: 60
    glyphs: *mdi-glyphs

###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

# Now render everything on the ePaper screen
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: 25
      inverted: True
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    rotation: 270°
    lambda: |-
     // https://stackoverflow.com/questions/4479017/storing-std-map-in-map


      std::map<std::string, std::string> font_icon_map
      {
        {"clear-night", "\U000F0594"},
        {"cloudy", "\U000F0590"},
        {"fog", "\U000F0591"},
        {"hail", "\U000F0592"},
        {"lightning", "\U000F0593"},
        {"lightning-rainy", "\U000F067E"},
        {"partlycloudy", "\U000F0595"},
        {"pouring", "\U000F0596"},
        {"rainy", "\U000F0597"},
        {"snowy", "\U000F0598"},
        {"snowy-rainy", "\U000F067F"},
        {"sunny", "\U000F0599"},
        {"windy", "\U000F059D"},
        {"windy-variant", "\U000F059E"},
        {"exceptional", "\U000F1C78"},
        {"partlycloudy-night", "\U000F0F31"},
        {"clock-alert-outline", "\U000F05CE"},
        {"compass-outline", "\U000F018C"}, // compass-outline
        {"", "\U000F02D6"},
      };

      // Panel
      int panel_x = it.get_width();
      int panel_y = it.get_height();
      int panel_x_mid = panel_x / 2;
      int panel_y_mid = panel_y / 2;

      int panel_x_14 = panel_x / 4;
      int panel_x_34 = (panel_x / 4) * 3;

      if (id(initial_data_received) == false) {
        it.fill(COLOR_ON);

        // Show loading screen before data is received.
        it.printf(panel_x_mid, panel_y_mid - 35, id(mdi_glyphs_large), COLOR_OFF, TextAlign::CENTER, font_icon_map["clock-alert-outline"].c_str());
        it.printf(panel_x_mid, panel_y_mid + 35, id(text_large), COLOR_OFF, TextAlign::CENTER, "WAITING FOR DATA");

      } else {
        it.fill(COLOR_OFF);

        // Top Panel - Header
        it.printf(panel_x_mid, 35, id(text_title), COLOR_ON, TextAlign::CENTER, "Good %s", id(timeofday_greeting).state.c_str());
        it.strftime(panel_x_mid, 85, id(text_large), COLOR_ON, TextAlign::CENTER, "%A %e %b", id(homeassistant_time).now());

        // Top Horizontal
        it.filled_rectangle(0, 119, panel_x, 3, COLOR_ON);

        // Left-Top - Daily Forecast
        it.printf(panel_x_14, 150, id(text_large_bold), COLOR_ON, TextAlign::CENTER, "NOW");
        it.printf(panel_x_14, 210, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(weather_now).state.c_str()].c_str());
        it.printf(panel_x_14, 270, id(text_large), COLOR_ON, TextAlign::CENTER, "%.0f°C", id(temperature_now).state);

        // Vertical
        it.filled_rectangle(panel_x_mid-1, 120, 3, 180, COLOR_ON);

        // Right-Top - Daily Forecast
        it.printf(panel_x_34, 150, id(text_large_bold), COLOR_ON, TextAlign::CENTER, "TODAY");
        it.printf(panel_x_34, 210, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(daily_forecast_condition0).state.c_str()].c_str());
        it.printf(panel_x_34, 270, id(text_large), COLOR_ON, TextAlign::CENTER, "%.0f - %.0f°C", id(daily_forecast_templow0).state, id(daily_forecast_temperature0).state);

        // Mid Horizontal
        it.filled_rectangle(0, 300, panel_x, 3, COLOR_ON);

        // Refresh Timestamp
        it.strftime(panel_x_mid, panel_y-15, id(text_small), COLOR_ON, TextAlign::BOTTOM_CENTER, "%H:%M", id(homeassistant_time).now());
      }

###############################################################################
