###############################################################################
# NOTES #######################################################################
###############################################################################

# https://www.waveshare.com/e-paper-esp32-driver-board.htm
# https://www.waveshare.com/wiki/E-Paper_ESP32_Driver_Board
# https://files.waveshare.com/upload/8/80/E-Paper_ESP32_Driver_Board_Schematic.pdf

# Can't use GPIO 13, 14, 15, 25, 26, 27 as they're on the ePaper connector

# https://esphome.io/components/i2c
# https://esphome.io/components/uart

# https://esphome.io/components/sensor/ld2420


###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: waveshare-epaper-b410c4
  friendly_name: Dev SmartFrame b410c4

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
      priority: 200.0
      then:
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s # Wait a bit longer so all the items are received
        - logger.log: "Initial data received. Refreshing display"
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: esp-idf

###############################################################################

# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: ${name}

api:

ota:
  platform: esphome
#  password: "3a328410f03e6b4c2e45ba985dc11ad7"

# Enable logging
logger:
#  level: VERBOSE #DEBUG

###############################################################################
# INPUTS / OUTPUTS / MODULES ##################################################
###############################################################################

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

uart:
  id: ld2420_uart
  tx_pin: GPIO23
  rx_pin: GPIO22
  baud_rate: 115200
  parity: NONE
  stop_bits: 1

output:
  - platform: gpio
    pin:
      number: GPIO2
      mode: output
    id: LED

ld2420:

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: no
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

number:
  - platform: ld2420
    presence_timeout:
      name: mmWave Presence Timeout
    min_gate_distance:
      name: mmWave Gate Minimum
    max_gate_distance:
      name: mmWave Gate Maximum
    gate_select:
      name: mmWave Gate Select
    still_threshold:
      name: mmWave Still Threshold Value
    move_threshold:
      name: mmWave Move Threshold Value

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - output.turn_on: LED
          - delay: 250ms
          - output.turn_off: LED
          - if:
              condition:
                and:
                  - lambda: 'return id(data_updated) == true;' # We have to have had new sensor data
                  - lambda: 'return id(time_since_refresh) >= 5;' # It has to have been at least 5 minutes since the last refresh
                  - lambda: 'return id(mmwave_presence).state == true;' # We have to have presence
              then:
                - logger.log:
                    format: "Refreshing display - States are: Sensor Data %d / Rate Limit Timer %u / Presence %d"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)', id(mmwave_presence).state ]
                - script.execute: update_screen
              else:
                - logger.log:
                    format: "Skipping display refresh -  States are: Sensor Data %d / Rate Limit Timer %u / Presence %d"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)', id(mmwave_presence).state ]
                - lambda: 'id(time_since_refresh) += 1;'

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: ESP32 Shutdown
  - platform: restart
    name: ESP32 Restart
  - platform: safe_mode
    name: ESP32 Restart (Safe Mode)
  - platform: template
    name: ESP32 Refresh Screen
    entity_category: config
    on_press:
      - script.execute: update_screen

  - platform: ld2420
    apply_config:
      name: mmWave Apply Config
    factory_reset:
      name: mmWave Factory Reset
    restart_module:
      name: mmWave Restart
    revert_config:
      name: mmWave Undo

select:
  - platform: ld2420
    operating_mode:
      name: mmWave Mode

switch:
  - platform: factory_reset
    name: ESP32 Factory Reset

###############################################################################
# BINARY SENSORS ##############################################################
###############################################################################

binary_sensor:
  - platform: status
    name: ESP32 Status

  - platform: ld2420
    has_target:
      name: mmWave Presence
      id: mmwave_presence
      on_release:
        then:
          - logger.log: "LVGL is idle"
          - lvgl.pause:
      on_press:
        then:
          - if:
              condition: lvgl.is_paused
              then:
                - logger.log: "LVGL resuming"
                - lvgl.resume:
                - lvgl.page.show:
                    id: main_page
                - lvgl.widget.redraw:

###############################################################################
# TEXT SENSORS ################################################################
###############################################################################

text_sensor:
  - platform: ld2420
    fw_version:
      name: LD2420 Firmware

  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: sensor.timeofday_greeting
    id: timeofday_greeting
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


###############################################################################
# GENERAL SENSORS #############################################################
###############################################################################

sensor:
    #Device UPTIME
  - platform: uptime
    name: ESP32 Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: ld2420
    moving_distance:
      name : mmWave Moving Distance
      filters:
        - throttle_average: 15s
        - filter_out: nan

  # Device Sensors - for monitoring device remotely
  - platform: template
    name: Display Last Update
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: Display Num Refresh
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: ESP32 WiFi Signal
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Home Assistant General Sensors


###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_extra_small
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_extra_small_bold
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_small
    size: 20
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_small_bold
    size: 20
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_med
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_med_bold
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_large
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_large_bold
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_title
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]


  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_med
    size: 40
    glyphs: &mdi-glyphs
      - "\U000F02D6" # Blank
      - "\U000F05CE" # clock-alert-outline

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_large
    size: 60
    glyphs: *mdi-glyphs

###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

# Now render everything on the ePaper screen
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: 25
      inverted: True
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    rotation: 270°
    auto_clear_enabled: false
 
lvgl:
  buffer_size: 25%
  displays:
    - eink_display
  pages:
    - id: main_page
      widgets:
        - label:
            align: CENTER
            text: 'Hello World!'

###############################################################################
