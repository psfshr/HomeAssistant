###############################################################################
# NOTES #######################################################################
###############################################################################

# SDCard
# 3 SS
# 4 MOSI
# 5 SCK
# 6 MISO
# 7 CD

# ePaper Panel
# 35 BUSY
# 36 RST
# 37 DC
# 38 CS
# 39 CLK
# 40 MOSI

# LEDs
# 2 LED

# Other
# 41 Input 1
# 42 Input 2
# 8 Relay

# 21 Relay

###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: revk-epd-731bac
  friendly_name: RevK EPD 731bac ePaper

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
    board_build.flash_size: 8MB
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s # Wait a bit longer so all the items are received
        - logger.log: "Initial data received. Refreshing display"
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf
    version: recommended
   
psram:
  mode: quad
  speed: 80MHz


################################################################################

# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: ${name}
  manual_ip:
    static_ip: 192.168.2.251
    gateway: 192.168.2.1
    subnet: 255.255.255.0
    dns1: 192.168.2.1

captive_portal:

# Enable Home Assistant API
api:

ota:
  platform: esphome

# Enable logging
logger:
  hardware_uart: USB_SERIAL_JTAG

###############################################################################
# INPUTS / OUTPUTS / MODULES ##################################################
###############################################################################

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO39
  mosi_pin: GPIO40

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO2
    num_leds: 25
    rmt_channel: 0
    chipset: ws2812
    name: "Edge LEDs"
    id: edge_leds
    effects:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 5
              gradient: true
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 5
              gradient: true
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 5
              gradient: true
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: no
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                and:
                  - lambda: 'return id(data_updated) == true;' # We have to have had new sensor data
                  - lambda: 'return id(time_since_refresh) >= 5;' # It has to have been at least 5 minutes since the last refresh
              then:
                - logger.log:
                    format: "Refreshing display - States are: Sensor Data %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)' ]
                - script.execute: update_screen
              else:
                - logger.log:
                    format: "Skipping display refresh -  States are: Sensor Data %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)' ]
                - lambda: 'id(time_since_refresh) += 1;'

      # - seconds: 0, 10, 20, 30, 45, 50
      #   minutes: /1
      #   then:
      #     - logger.log: "LEDs Off"
      #     - light.addressable_set:
      #         id: edge_leds
      #         range_from: 0
      #         range_to: 24
      #         red: 0%
      #         green: 0%
      #         blue: 0%
      # - seconds: 5, 15, 25, 35, 45, 55
      #   minutes: /1
      #   then:
      #     - logger.log: "LEDs On"
      #     - light.addressable_set:
      #         id: edge_leds
      #         range_from: 0
      #         range_to: 24
      #         red: 25%
      #         green: 25%
      #         blue: 25%

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: ESP32 Shutdown
  - platform: restart
    name: ESP32 Restart
  - platform: safe_mode
    name: ESP32 Restart (Safe Mode)
  - platform: template
    name: ESP32 Refresh Screen
    entity_category: config
    on_press:
      - script.execute: update_screen

switch:
  - platform: factory_reset
    name: ESP32 Factory Reset

###############################################################################
# BINARY SENSORS ##############################################################
###############################################################################

binary_sensor:
  - platform: status
    name: ESP32 Status

###############################################################################
# TEXT SENSORS ################################################################
###############################################################################

text_sensor:

  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: sensor.timeofday_greeting
    id: timeofday_greeting
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  # Weather Sensors - Now
  - platform: homeassistant
    entity_id: sensor.weather_now
    id: weather_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Weather Sensors - Daily
  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: datetime0
    id: daily_forecast_datetime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: shorttime0
    id: daily_forecast_shorttime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: condition0
    id: daily_forecast_condition0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: datetime1
    id: daily_forecast_datetime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: shorttime1
    id: daily_forecast_shorttime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: condition1
    id: daily_forecast_condition1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  # Weather Sensors - Hourly
  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime0
    id: hourly_forecast_datetime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'  
  
  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime0
    id: hourly_forecast_shorttime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition0
    id: hourly_forecast_condition0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime1
    id: hourly_forecast_datetime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime1
    id: hourly_forecast_shorttime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition1
    id: hourly_forecast_condition1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  
  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime2
    id: hourly_forecast_datetime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime2
    id: hourly_forecast_shorttime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition2
    id: hourly_forecast_condition2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime3
    id: hourly_forecast_datetime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime3
    id: hourly_forecast_shorttime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition3
    id: hourly_forecast_condition3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime4
    id: hourly_forecast_datetime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime4
    id: hourly_forecast_shorttime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition4
    id: hourly_forecast_condition4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

##

###############################################################################
# GENERAL SENSORS #############################################################
###############################################################################

sensor:
    #Device UPTIME
  - platform: uptime
    name: ESP32 Uptime
    id: sys_uptime
    update_interval: 60s


  # Device Sensors - for monitoring device remotely
  - platform: template
    name: Display Last Update
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: Display Num Refresh
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: ESP32 WiFi Signal
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Home Assistant General Sensors

  # Weather Sensors - Now
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_temperature
    id: temperature_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_humidity
    id: humidity_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_pressure
    id: pressure_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  # Thermal Comfort
  - platform: homeassistant
    entity_id: sensor.thermal_comfort_heat_index
    id: feels_like_temperature
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'




  # Weather Sensors - Daily
  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: temperature0
    id: daily_forecast_temperature0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: templow0
    id: daily_forecast_templow0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_speed0
    id: wind_speed0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_bearing0
    id: wind_bearing0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: temperature1
    id: daily_forecast_temperature1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: templow1
    id: daily_forecast_templow1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_speed1
    id: wind_speed1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_daily
    attribute: wind_bearing1
    id: wind_bearing1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Weather Sensors - Hourly
  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature0
    id: hourly_forecast_temperature0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature1
    id: hourly_forecast_temperature1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature2
    id: hourly_forecast_temperature2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature3
    id: hourly_forecast_temperature3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature4
    id: hourly_forecast_temperature4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

##

###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_small
    size: 20
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_medium
    size: 40
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_medium_bold
    size: 40
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_large
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_large_bold
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 700
    id: text_title
    size: 75
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 700
      glyphs: [ "'", "£" ]

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_medium
    size: 50
    glyphs: &mdi-glyphs
      - "\U000F18D7" # sun-thermometer-outline
      - "\U000F0594" # weather-night / clear-night
      - "\U000F0590" # weather-cloudy / cloudy
      - "\U000F0591" # weather-fog / fog
      - "\U000F0592" # weather-hail / hail
      - "\U000F0593" # weather-lightning / lightning
      - "\U000F067E" # weather-lightning-rainy / lightning-rainy
      - "\U000F0595" # weather-partly-cloudy / partlycloudy
      - "\U000F0596" # weather-pouring / pouring
      - "\U000F0597" # weather-rainy / rainy
      - "\U000F0598" # weather-snowy / snowy
      - "\U000F067F" # weather-snowy-rainy / snowy-rainy
      - "\U000F0599" # weather-sunny / sunny
      - "\U000F059D" # weather-windy / windy
      - "\U000F059E" # weather-windy-variant / windy-variant
      - "\U000F1C78" # weather-hurricane-outline / exceptional
      - "\U000F0F31" # weather-night-partly-cloudy / partlycloudy-night
      - "\U000F05CE" # clock-alert-outline
      - "\U000F018C" # compass-outline
      - "\U000F0D3E" # transmission-tower
      - "\U000F02D6" # Blank

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_large
    size: 60
    glyphs: *mdi-glyphs

###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

# Now render everything on the ePaper screen
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO38
    dc_pin: GPIO37
    busy_pin:
      number: 35
      inverted: True
    reset_pin: GPIO36
    #reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    rotation: 270°
    lambda: |-
      // https://stackoverflow.com/questions/4479017/storing-std-map-in-map

      std::map<std::string, std::string> font_icon_map
      {
        {"sun-thermometer-outline", "\U000F18D7"},
        {"clear-night", "\U000F0594"},
        {"cloudy", "\U000F0590"},
        {"fog", "\U000F0591"},
        {"hail", "\U000F0592"},
        {"lightning", "\U000F0593"},
        {"lightning-rainy", "\U000F067E"},
        {"partlycloudy", "\U000F0595"},
        {"pouring", "\U000F0596"},
        {"rainy", "\U000F0597"},
        {"snowy", "\U000F0598"},
        {"snowy-rainy", "\U000F067F"},
        {"sunny", "\U000F0599"},
        {"windy", "\U000F059D"},
        {"windy-variant", "\U000F059E"},
        {"exceptional", "\U000F1C78"},
        {"partlycloudy-night", "\U000F0F31"},
        {"clock-alert-outline", "\U000F05CE"},
        {"compass-outline", "\U000F018C"}, // compass-outline
        {"transmission_tower", "\U000F0D3E"}, // transmission-tower
        {"", "\U000F02D6"},
      };

      // Panel
      int panel_x = it.get_width();
      int panel_y = it.get_height();

      int panel_x_14 = panel_x / 4;
      int panel_x_12 = panel_x / 2;
      int panel_x_34 = (panel_x / 4) * 3;

      int panel_y_12 = panel_y / 2;

      if (id(initial_data_received) == false) {
        it.fill(COLOR_OFF);

        // Show loading screen before data is received.
        it.printf(panel_x_12, panel_y_12 - 35, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, font_icon_map["clock-alert-outline"].c_str());
        it.printf(panel_x_12, panel_y_12 + 35, id(text_medium), COLOR_ON, TextAlign::CENTER, "WAITING FOR DATA");

      } else {
        it.fill(COLOR_OFF);

        // Top Panel - Header
        it.printf(panel_x_12, 50, id(text_title), COLOR_ON, TextAlign::CENTER, "TODAY");

        it.line(panel_x_14, 100, panel_x_34, 100);

        // Weather Forecast - Now
        it.printf(panel_x_14 - 20, 150, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER_LEFT, "%s", font_icon_map[id(daily_forecast_condition0).state.c_str()].c_str());
        it.printf(panel_x_34 + 20, 150, id(text_large), COLOR_ON, TextAlign::CENTER_RIGHT, "%.0f - %.0f°C", id(daily_forecast_templow0).state, id(daily_forecast_temperature0).state);

        // Weather Forecast - Today Hourly
        it.printf(panel_x_14 - 20, 225, id(text_medium_bold), COLOR_ON, TextAlign::CENTER, "%s", id(hourly_forecast_shorttime0).state.c_str());
        it.printf(panel_x_14 - 20, 275, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition0).state.c_str()].c_str());
        it.printf(panel_x_14 - 20, 325, id(text_medium), COLOR_ON, TextAlign::CENTER, "%.0f°C", id(hourly_forecast_temperature0).state);

        it.printf(panel_x_12, 225, id(text_medium_bold), COLOR_ON, TextAlign::CENTER, "%s", id(hourly_forecast_shorttime1).state.c_str());
        it.printf(panel_x_12, 275, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition1).state.c_str()].c_str());
        it.printf(panel_x_12, 325, id(text_medium), COLOR_ON, TextAlign::CENTER, "%.0f°C", id(hourly_forecast_temperature1).state);

        it.printf(panel_x_34 + 20, 225, id(text_medium_bold), COLOR_ON, TextAlign::CENTER, "%s", id(hourly_forecast_shorttime2).state.c_str());
        it.printf(panel_x_34 + 20, 275, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition2).state.c_str()].c_str());
        it.printf(panel_x_34 + 20, 325, id(text_medium), COLOR_ON, TextAlign::CENTER, "%.0f°C", id(hourly_forecast_temperature2).state);

        it.line(panel_x_14, 375, panel_x_34, 375);


        it.printf(panel_x_14, 425, id(text_medium_bold), COLOR_ON, TextAlign::CENTER, "NOW");
        it.printf(panel_x_14, 475, id(mdi_glyphs_large), COLOR_ON, TextAlign::CENTER, "%s", font_icon_map[id(weather_now).state.c_str()].c_str());
        it.printf(panel_x_14, 525, id(text_medium), COLOR_ON, TextAlign::CENTER, "%.0f°C", id(temperature_now).state);
        it.printf(panel_x_14, 575, id(text_medium), COLOR_ON, TextAlign::CENTER, "(%.0f°C)", id(feels_like_temperature).state);
        it.printf(panel_x_14, 625, id(text_medium), COLOR_ON, TextAlign::CENTER, "%.0f%%", id(humidity_now).state);

        it.line(panel_x_12, 400, panel_x_12, 650);

        // weather_now
        // temperature_now
        // humidity_now
        // pressure_now

        // Refresh Timestamp
        it.strftime(panel_x-5, panel_y-5, id(text_small), COLOR_ON, TextAlign::BOTTOM_RIGHT, "%H:%M", id(homeassistant_time).now());
      }

###############################################################################

